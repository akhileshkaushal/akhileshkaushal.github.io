[
  {
    "id": "rna-seq",
    "name": "RNAseq-Pipeline",
    "description": "RNA-seq analysis using DESeq2, STAR, Salmon, and GSEA.",
    "version": "1.2.0",
    "link": "transcriptomic/index.html",
	"detail_html": "transcriptomic/index.html",
    "tags": ["Transcriptomics", "DESeq2", "edgeR", "GSEA"],
    "details": {
      "steps": [
        "Quality control with FastQC and MultiQC",
        "Alignment with STAR or quantification with Salmon",
        "Transcript quantification and count matrix generation",
        "Differential expression with DESeq2",
        "Pathway enrichment using GSEA or ORA"
      ],
      "repo": "https://github.com/akhileshkaushal/RNAseq-Pipeline",
      "usage": "bash run_pipeline.sh --config config.yaml"
    }
  },
  {
    "id": "methylation",
    "name": "Methylation-Pipeline",
    "description": "EPIC array preprocessing, normalization, and differential methylation analysis.",
    "version": "0.9.1",
    "link": "methylation/index.html",
    "detail_html": "methylation/index.html",
    "tags": ["Methylation", "Illumina", "EPIC"],
    "details": {
      "steps": [
        "Preprocessing of IDATs using minfi",
        "Probe filtering and quality control",
        "Normalization (e.g., BMIQ or SWAN)",
        "Differential methylation analysis using limma",
        "Pathway enrichment using MSigDB gene sets"
      ],
      "repo": "https://github.com/akhileshkaushal/methylation-pipeline",
      "usage": "Rscript run_pipeline.R config.yml"
    }
  },
  
  {
    "id": "atacseq",
    "name": "ATAC-seq Pipeline",
    "description": "Analysis of open chromatin accessibility using ATAC-seq data.",
    "version": "1.0.0",
    "link": "atacseq/index.html",
    "detail_html": "atacseq/index.html",
    "tags": ["ATAC-seq", "Chromatin", "Footprinting"],
    "details": {
      "steps": [
        "Read alignment and deduplication",
        "Peak calling using MACS2",
        "Footprint analysis to infer TF occupancy",
        "Differential accessibility across conditions",
        "Integration with ChIP-seq and RNA-seq"
      ],
      "repo": "https://github.com/akhileshkaushal/atacseq-pipeline",
      "usage": "bash run_atacseq.sh --config atac_config.yaml"
    }
  },
  {
    "id": "chipseq",
    "name": "ChIP-seq Pipeline",
    "description": "ChIP-seq pipeline for transcription factor binding or histone modification profiling.",
    "version": "1.0.0",
    "link": "chipseq/index.html",
    "detail_html": "chipseq/index.html",
    "tags": ["ChIP-seq", "Transcription Factor", "Histone Marks"],
    "details": {
      "steps": [
        "Read alignment and filtering",
        "Peak calling using MACS2",
        "Peak annotation and motif analysis",
        "Differential binding analysis",
        "Genome browser track generation"
      ],
      "repo": "https://github.com/akhileshkaushal/chipseq",
      "usage": "bash run_chipseq.sh --config chip_config.yaml"
    }
  },
  {
    "id": "cutntag",
    "name": "Cut&Tag Pipeline",
    "description": "End-to-end processing of Cut&Tag data for chromatin profiling.",
    "version": "1.0.0",
    "link": "cutntag/index.html",
    "detail_html": "cutntag/index.html",
    "tags": ["Cut&Tag", "Chromatin", "Histone"],
    "details": {
      "steps": [
        "Adapter trimming and quality filtering",
        "Read alignment using Bowtie2",
        "Peak calling with SEACR or MACS2",
        "Histone mark or TF-specific analysis",
        "Visualization and differential enrichment"
      ],
      "repo": "https://github.com/akhileshkaushal/cutandtag-pipeline",
      "usage": "bash run_cutandtag.sh --config cut_config.yaml"
    }
  },
  {
    "id": "singlecellomics",
    "name": "Single Cell Omics",
    "description": "Multimodal single-cell analysis: scRNA-seq, CITE-seq, TCR/BCR-seq integration.",
    "version": "1.0.0",
    "link": "singlecellomics/index.html",
    "detail_html": "singlecellomics/index.html",
    "tags": ["scRNA-seq", "CITE-seq", "TCR-seq", "BCR-seq"],
    "details": {
      "steps": [
        "Preprocessing and filtering of scRNA-seq data",
        "CITE-seq ADT normalization and integration",
        "TCR/BCR clonotype mapping using scRepertoire",
        "Dimensionality reduction and clustering",
        "Cell-type annotation and clonal expansion visualization"
      ],
      "repo": "https://github.com/akhileshkaushal/single-cell-omics-pipeline",
      "usage": "Rscript run_singlecell.R config.yml"
    }
  },
  {
    "id": "wgbs",
    "name": "WGBS Pipeline",
    "description": "Preprocessing and methylation analysis of Whole Genome Bisulfite Sequencing data.",
    "version": "1.0.0",
    "link": "wgbs/index.html",
    "detail_html": "wgbs/index.html",
    "tags": ["WGBS", "Methylation", "Bismark"],
    "details": {
      "steps": [
        "Alignment with Bismark to bisulfite-converted genome",
        "Methylation extraction and coverage stats",
        "Differential methylation analysis using DSS or methylKit",
        "Tiling and gene-centric methylation reports",
        "Visualization with methylation metaplots"
      ],
      "repo": "https://github.com/akhileshkaushal/wgbs-pipeline",
      "usage": "bash run_wgbs.sh --config wgbs_config.yaml"
    }
  },
  {
    "id": "wgswes",
    "name": "WGS/WES Variant Calling Pipeline",
    "description": "Comprehensive germline and somatic variant calling pipeline from whole genome/exome data.",
    "version": "1.0.0",
    "link": "wgswes/index.html",
    "detail_html": "wgswes/index.html",
    "tags": ["WGS", "WES", "Germline", "Somatic", "GATK"],
    "details": {
      "steps": [
        "Preprocessing: Trimming, alignment with BWA-MEM, marking duplicates",
        "Base recalibration with GATK",
        "Germline calling with HaplotypeCaller in GVCF mode",
        "Joint genotyping and variant filtration",
        "Somatic calling (tumor-normal pairs) with Mutect2",
        "Tumor-only calling with panel of normals and gnomAD filtering",
        "Annotation using VEP or ANNOVAR"
      ],
      "repo": "https://github.com/akhileshkaushal/wgs-wes-pipeline",
      "usage": "bash run_variant_pipeline.sh --config variant_config.yaml"
    }
  },
  {
    "id": "hiplex-demux",
    "name": "HiPlex Demultiplexer",
    "description": "Preprocessing and dual-layer demultiplexing of multiplexed Cut&Tag reads using sample and antibody barcodes.",
    "version": "1.0.0",
    "link": "hiplex/index.html",
    "detail_html": "hiplex/index.html",
    "tags": ["HiPlex", "Demultiplexing", "FASTQ", "Barcodes"],
    "details": {
      "steps": [
        "Sample-level demultiplexing using i7/i5 indices",
        "Antibody-level demultiplexing using 5′ and 3′ barcodes",
        "Barcode pair matching for homo- and hetero-combinations"
      ],
      "repo": "https://github.com/akhileshkaushal/hiplex-demux",
      "usage": "python hiplex_demux.py --input fastq_dir --output output_dir --index-table indices.csv"
    }
  }
]

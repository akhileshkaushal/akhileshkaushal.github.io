Stage-to-Tool Mapping With Example Commands
-------------------------------------------

.. list-table::
   :header-rows: 1
   :widths: 18 22 60

   * - Stage
     - Common tools
     - Notes
   * - Inputs & metadata
     - Sample sheet (CSV/TSV), PoN VCF, gnomAD resource, capture BED
     - Keep kit version, bait BED, genome build (GRCh38) and timepoint in metadata; verify fastq naming scheme.
   * - QC of raw reads
     - FastQC, MultiQC
     - Check per-base quality, adapter content, overrepresented sequences, duplication levels.
   * - Trimming (optional)
     - fastp, Cutadapt
     - Use only if adapters/quality tails present; record trimming params for comparability across timepoints.
   * - Alignment
     - BWA-MEM2, samtools
     - Align to GRCh38 with consistent ALT/decoy handling; sort BAM by coordinate.
   * - Post-alignment
     - GATK4, Picard, samtools
     - Mark duplicates; BQSR with dbSNP + Mills indels; index BAMs; capture metrics.
   * - Somatic SNV/indel
     - GATK4 Mutect2 (+ PoN + gnomAD), FilterMutectCalls; optional Strelka2
     - Prefer tumorâ€“normal; for tumor-only enforce stricter filtering and orthogonal review.
   * - CNAs
     - CNVkit, EXCAVATOR2; optional FACETS or PureCN
     - Use matched normals or pooled normals; report purity/ploidy if using FACETS/PureCN.
   * - Clonality
     - PyClone-VI, SciClone, Ccube
     - Exclude CNA segments or use CNA-aware models; track clusters across timepoints.
   * - Annotation
     - VEP, ANNOVAR, snpEff; bcftools
     - Add gene consequence, population AF, ClinVar/COSMIC; harmonize sample/genotype fields.
   * - Reporting
     - MultiQC, custom notebooks, markdown/Rmd
     - Summarize drivers, spectra, clonality, CNAs; include per-step software versions and references.

Example commands (bash)
~~~~~~~~~~~~~~~~~~~~~~~

**0) Environment and references**

.. code-block:: bash

   # Conda env (example)
   conda create -y -n wes_cll \
     bwa-mem2 samtools fastqc multiqc fastp \
     gatk4 bcftools bedtools \
     ensembl-vep cnvkit -c conda-forge -c bioconda
   conda activate wes_cll

   # References (GRCh38) - adjust to your paths
   REF=GRCh38.fa
   DBSNP=dbsnp_138.vcf.gz
   MILLS=Mills_and_1000G_gold_standard.indels.hg38.vcf.gz
   GNOMAD_AF=af-only-gnomad.hg38.vcf.gz
   PON=pon.hg38.mutect2.vcf.gz
   BAIT_BED=exome_targets_hg38.bed

**1) QC and optional trimming**

.. code-block:: bash

   # FastQC and MultiQC
   fastqc tumor_R1.fq.gz tumor_R2.fq.gz normal_R1.fq.gz normal_R2.fq.gz -o qc/
   multiqc qc/ -o qc/

   # Optional trimming with fastp (HTML report included)
   fastp -i tumor_R1.fq.gz -I tumor_R2.fq.gz \
         -o tumor.trim.R1.fq.gz -O tumor.trim.R2.fq.gz \
         --detect_adapter_for_pe --html qc/tumor_fastp.html

**2) Alignment and sorting**

.. code-block:: bash

   R1=tumor.trim.R1.fq.gz
   R2=tumor.trim.R2.fq.gz

   bwa-mem2 mem -t 16 -R "@RG\\tID:TUMOR\\tSM:TUMOR\\tPL:ILLUMINA" \
       $REF $R1 $R2 | samtools sort -@ 8 -o tumor.sorted.bam
   samtools index tumor.sorted.bam

   bwa-mem2 mem -t 16 -R "@RG\\tID:NORMAL\\tSM:NORMAL\\tPL:ILLUMINA" \
       $REF normal_R1.fq.gz normal_R2.fq.gz | samtools sort -@ 8 -o normal.sorted.bam
   samtools index normal.sorted.bam

**3) Post-alignment processing (GATK4)**

.. code-block:: bash

   gatk MarkDuplicates -I tumor.sorted.bam -O tumor.dedup.bam -M tumor.mkdup.txt
   samtools index tumor.dedup.bam

   gatk BaseRecalibrator -R $REF -I tumor.dedup.bam \
       --known-sites $DBSNP --known-sites $MILLS \
       -O tumor.recal.table
   gatk ApplyBQSR -R $REF -I tumor.dedup.bam \
       --bqsr-recal-file tumor.recal.table \
       -O tumor.bqsr.bam
   samtools index tumor.bqsr.bam

   gatk MarkDuplicates -I normal.sorted.bam -O normal.dedup.bam -M normal.mkdup.txt
   samtools index normal.dedup.bam

   gatk BaseRecalibrator -R $REF -I normal.dedup.bam \
       --known-sites $DBSNP --known-sites $MILLS \
       -O normal.recal.table
   gatk ApplyBQSR -R $REF -I normal.dedup.bam \
       --bqsr-recal-file normal.recal.table \
       -O normal.bqsr.bam
   samtools index normal.bqsr.bam

**4) Somatic SNV/indel calling (Mutect2)**

.. code-block:: bash

   gatk Mutect2 -R $REF \
       -I tumor.bqsr.bam -tumor TUMOR \
       -I normal.bqsr.bam -normal NORMAL \
       --germline-resource $GNOMAD_AF \
       --panel-of-normals $PON \
       --intervals $BAIT_BED \
       -O tumor_vs_normal.unfiltered.vcf.gz

   gatk LearnReadOrientationModel \
       -I f1r2.tar.gz -O read-orientation-model.tar.gz  # only if you collected F1R2 counts

   gatk GetPileupSummaries -I tumor.bqsr.bam -V $GNOMAD_AF -L $BAIT_BED -O tumor.pileups.table
   gatk GetPileupSummaries -I normal.bqsr.bam -V $GNOMAD_AF -L $BAIT_BED -O normal.pileups.table
   gatk CalculateContamination -I tumor.pileups.table -matched normal.pileups.table -O contamination.table

   gatk FilterMutectCalls \
       -R $REF -V tumor_vs_normal.unfiltered.vcf.gz \
       --contamination-table contamination.table \
       --ob-priors read-orientation-model.tar.gz \
       -O tumor_vs_normal.filtered.vcf.gz

   # Optional second caller (Strelka2)
   configureStrelkaSomaticWorkflow.py \
       --tumorBam tumor.bqsr.bam --normalBam normal.bqsr.bam \
       --referenceFasta $REF --exome --callRegions $BAIT_BED \
       --runDir strelka_run
   strelka_run/runWorkflow.py -m local -j 16

**5) CNAs (CNVkit example)**

.. code-block:: bash

   # Build pooled normal reference (do once per kit)
   cnvkit.py batch normal*.bqsr.bam --normal --targets $BAIT_BED \
       --fasta $REF --output-reference cnvkit_ref.cnn --output-dir cnvkit_norm_ref

   # Run tumor with pooled normal reference
   cnvkit.py batch tumor.bqsr.bam --targets $BAIT_BED --fasta $REF \
       --reference cnvkit_ref.cnn --output-dir cnvkit_tumor

   # Segment and call
   cnvkit.py call cnvkit_tumor/tumor.bqsr.cns -o cnvkit_tumor/tumor.call.cns

**6) Clonality (PyClone-VI quick start)**

.. code-block:: bash

   # Prepare input table with: mutation_id, ref_counts, var_counts, normal_cn, minor_cn, major_cn, tumor_content
   # Use cnvkit/FACETS output to set copy-number and purity where possible.

   pyclone-vi fit --in-file pyclone_input.tsv --out-file pyclone_results.tsv --seed 13
   pyclone-vi write-results-file --in-file pyclone_results.tsv --out-file pyclone_posterior.tsv
   # Visualize clusters in R/python downstream

**7) Annotation (VEP) and final packaging**

.. code-block:: bash

   vep -i tumor_vs_normal.filtered.vcf.gz -o tumor_vs_normal.vep.vcf \
       --assembly GRCh38 --cache --offline --vcf --everything \
       --fork 8 --species homo_sapiens

   # Basic VCF hygiene
   bcftools sort -Oz -o tumor_vs_normal.vep.sorted.vcf.gz tumor_vs_normal.vep.vcf
   bcftools index -t tumor_vs_normal.vep.sorted.vcf.gz

Reproducibility checklist
~~~~~~~~~~~~~~~~~~~~~~~~~

- Record software versions (e.g., `conda env export > env.yml`) and container image digests if using Docker/Apptainer.
- Pin reference assets: GRCh38 fasta, dbSNP, Mills indels, gnomAD AF, PoN, exome BED (with version and MD5).
- Emit per-step metrics (dup rate, coverage, on-target %, contamination, TMB-like counts if needed).
- Store command logs and MultiQC summary in the run folder.
